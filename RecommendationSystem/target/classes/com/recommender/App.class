package com.recommender;

import java.io.File;
import java.util.Iterator;
import java.util.List;
import org.apache.mahout.cf.taste.impl.model.file.FileDataModel;
import org.apache.mahout.cf.taste.impl.neighborhood.NearestNUserNeighborhood;
import org.apache.mahout.cf.taste.impl.recommender.GenericUserBasedRecommender;
import org.apache.mahout.cf.taste.impl.similarity.PearsonCorrelationSimilarity;
import org.apache.mahout.cf.taste.model.DataModel;
import org.apache.mahout.cf.taste.neighborhood.UserNeighborhood;
import org.apache.mahout.cf.taste.recommender.RecommendedItem;
import org.apache.mahout.cf.taste.recommender.Recommender;
import org.apache.mahout.cf.taste.similarity.UserSimilarity;

public class App {
   public App() {
   }

   public static void main(String[] args) {
      try {
         File file = new File("src/main/resources/data.csv");
         System.out.println("File exists? " + file.exists());
         DataModel model = new FileDataModel(file);
         UserSimilarity similarity = new PearsonCorrelationSimilarity(model);
         UserNeighborhood neighborhood = new NearestNUserNeighborhood(2, similarity, model);
         Recommender recommender = new GenericUserBasedRecommender(model, neighborhood, similarity);
         List<RecommendedItem> recommendations = recommender.recommend(3L, 3);
         System.out.println("Recommended items for user 3:");
         if (recommendations.isEmpty()) {
            System.out.println("No recommendations found.");
         } else {
            Iterator var8 = recommendations.iterator();

            while(var8.hasNext()) {
               RecommendedItem item = (RecommendedItem)var8.next();
               System.out.println("Item ID: " + item.getItemID() + " , Value: " + item.getValue());
            }
         }
      } catch (Exception var9) {
         var9.printStackTrace();
      }

   }
}
